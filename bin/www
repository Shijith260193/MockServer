#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('mockserver:server');
const http = require('http');

/**
 * Get port from environment and store in Express.
 */
/* eslint-disable-next-line */
const port = normalizePort(process.env.PORT || '3000');

app.set('port',port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
/* eslint-disable-next-line */
server.on('error',onError);
/* eslint-disable-next-line */
server.on('listening',onListening);

/**
 * Normalize a port into a number, string, or false.
 */
/* jshint ignore:start */
const normalizePort = (val) => {
/* jshint ignore:end */
    /* jshint ignore:start */
    /* eslint-disable-next-line*/
    let port = parseInt(val,10);
    /* jshint ignore:end*/
    if (isNaN(port)) {
        // A named pipe
        return val;
    }

    if (port >= 0) {
        // A port number
        return port;
    };
    /* jshint ignore:start */

    return false;
    /*jshint ignore:end */
};

/*
 * Event listener for HTTP server "error" event.
 */

const onError = (error) => {
    if (error.syscall !== 'listen') {
        throw error;
    }
};

/* eslint-disable */
let bind = typeof port === 'string' ? 
  `Pipe ${port}` : 
  `Port ${port}`;
/* eslint-enable */

//A  handle specific listen errors with friendly messages

/*eslint-disable */
switch (error.code) {
case 'EACCES':
    console.error(`${bind} requires elevated privileges`);
    process.exit(1);
    break;
case 'EADDRINUSE':
    console.error(`${bind} is already in use`);
    process.exit(1);
    break;
default:
    throw error;
};

/*eslint-enable */
/**
 * Event listener for HTTP server "listening" event.
 */

const onListening = () => {
    const addr = server.address();
    /*eslint-disable*/
    let bind = typeof addr === 'string'? 
    'pipe ' + addr : 
    'port ' + addr.port;
    /*eslint-enable*/
    debug(`Listening on ${bind}`);
};